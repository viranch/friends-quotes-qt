######################################################################
# Automatically generated by qmake (2.01a) Wed Mar 28 23:38:57 2012
######################################################################

TEMPLATE = app
TARGET = 
DEPENDPATH += . qml
INCLUDEPATH += .
QT += core gui declarative xml
qml.source = qml
qml.target =
DEPLOYMENTFOLDERS += qml

# Input
SOURCES += main.cpp object.cpp
HEADERS += object.h

for(deploymentfolder, DEPLOYMENTFOLDERS) {
    item = item$${deploymentfolder}
    itemsources = $${item}.sources
    $$itemsources = $$eval($${deploymentfolder}.source)
    itempath = $${item}.path
    $$itempath= $$eval($${deploymentfolder}.target)
    export($$itemsources)
    export($$itempath)
    DEPLOYMENT += $$item
}

win32 {
    copyCommand =
    for(deploymentfolder, DEPLOYMENTFOLDERS) {
        source = $$PWD/$$eval($${deploymentfolder}.source)
        source = $$replace(source, /, \\)
        sourcePathSegments = $$split(source, \\)
        target = $$OUT_PWD/$$eval($${deploymentfolder}.target)/$$last(sourcePathSegments)
        target = $$replace(target, //, /)
        target = $$replace(target, /, \\)
        !isEqual(source,$$target) {
            copyCommand += $(COPY_DIR) \"$$source\" \"$$target\"
        }
    }
} else:unix { # Assumed to be a Desktop Unix
    copyCommand =
    for(deploymentfolder, DEPLOYMENTFOLDERS) {
        source = $$PWD/$$eval($${deploymentfolder}.source)
        source = $$replace(source, \\\\, /)
        macx {
            target = $$OUT_PWD/$${TARGET}.app/Contents/Resources/$$eval($${deploymentfolder}.target)
        } else {
            target = $$OUT_PWD/$$eval($${deploymentfolder}.target)
        }
        target = $$replace(target, \\\\, /)
        sourcePathSegments = $$split(source, /)
        targetFullPath = $$target/$$last(sourcePathSegments)
        targetFullPath = $$replace(targetFullPath, //, /)
        !isEqual(source,$$targetFullPath) {
            copyCommand += $(MKDIR) \"$$target\"
            copyCommand += && $(COPY_DIR) \"$$source\" \"$$target\"
        }
    }
}
!isEmpty(copyCommand) {
    copyCommand = @echo Copying application data... && $$copyCommand
    copydeploymentfolders.commands = $$copyCommand
    first.depends = $(first) copydeploymentfolders
    export(first.depends)
    export(copydeploymentfolders.commands)
    QMAKE_EXTRA_TARGETS += first copydeploymentfolders
}

export (DEPLOYMENT)
export (QMAKE_EXTRA_TARGETS)
